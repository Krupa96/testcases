import random

noise_list = ['ČÁŘÉK', 'NOVÁK']
noise_set = {w.upper() for w in noise_list}

diac_rev_dict = {'Č': 'C', 'Á': 'A', 'Ř': 'R', 'É': 'E'}
diac_rep_dict = {
    'C': ['Č'],
    'A': ['Á', 'À'],
    'R': ['Ř'],
    'E': ['É', 'È']
}

def convert_one_token(token):
    token_upper = token.upper()

    if token_upper in noise_set:
        return None  # Not modifiable

    diac_chars = [c for c in token_upper if c in diac_rev_dict]
    ascii_chars = [c for c in token_upper if c in diac_rep_dict]

    if diac_chars:
        to_replace = random.choice(diac_chars)
        return token.replace(to_replace, diac_rev_dict[to_replace], 1)

    elif ascii_chars:
        to_replace = random.choice(ascii_chars)
        diac_variant = random.choice(diac_rep_dict[to_replace])
        return token.replace(to_replace, diac_variant, 1)

    return None  # No change possible

def convert_name(name):
    tokens = name.split()

    modifiable_indices = []
    for i, t in enumerate(tokens):
        if t.upper() not in noise_set:
            if any(c in diac_rev_dict or c in diac_rep_dict for c in t.upper()):
                modifiable_indices.append(i)

    if not modifiable_indices:
        return None  # ⛔ Nothing to convert, skip row

    # Modify one eligible token
    idx = random.choice(modifiable_indices)
    converted = convert_one_token(tokens[idx])
    
    if converted is None:
        return None  # ⛔ Conversion attempt failed

    tokens[idx] = converted
    return ' '.join(tokens)


# Case 2
import random

# Noise list and punctuation options
noise_list = ['ČÁŘÉK', 'NOVÁK']
noise_set = {w.upper() for w in noise_list}
punctuation_list = ['.', ',', '-', "'"]

def insert_random_punctuation(token):
    if len(token) == 0:
        return None

    punct = random.choice(punctuation_list)
    pos = random.randint(1, len(token) - 1)  # Avoid placing at start (optional)
    return token[:pos] + punct + token[pos:]

def fm20_transform(name):
    tokens = name.split()

    # Find indices of tokens NOT in noise list
    modifiable_indices = [i for i, t in enumerate(tokens) if t.upper() not in noise_set]

    if not modifiable_indices:
        return None  # No eligible token, skip

    idx = random.choice(modifiable_indices)
    modified_token = insert_random_punctuation(tokens[idx])

    if not modified_token:
        return None  # Insert failed (empty token)

    tokens[idx] = modified_token
    return ' '.join(tokens)
